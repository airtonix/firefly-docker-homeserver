#!/bin/bash
HERE=$(
    cd "${BASH_SOURCE[0]%/*}" || exit
    pwd
)
. "${HERE}/core/lib/dispatch.sh"

#
# Utilities
#

###
# Unindent print output
#
# Avoids having to mangle nicely indented code just so it prints nicely
dedent() ( echo "$1" | sed 's/^[[:space:]]*//')


###
# Test if a docker-compose stack running?
#
is_compose_stack_running () {

    # does the file exist
    [ ! -f "${1}" ] && {
        echo "Missing $1."
        exit 1
    }

    # check if the instance is running
    EXPECTED_CONTAINERS="$(docker-compose -f ${1} ps --services)"
    RUNNING_CONTAINERS="$(docker-compose -f ${1} ps --services --filter "status=running")"

    # is the list of running containers the same as the list of expected containers
    if [[ "$RUNNING_CONTAINERS" == "$EXPECTED_CONTAINERS" ]]; then
        echo 1
    else
        echo 0
    fi
}

###
# Is part of the stack running?
#
is_compose_stack_partly_running () {

    # does the file exist
    [ ! -f "${1}" ] && {
        echo "Missing $1."
        exit 1
    }

    # check if the instance is running
    RUNNING_CONTAINERS="$(docker-compose -f ${1} ps --services --filter "status=running")"

    # is the variable empty?
    [ -z "$RUNNING_CONTAINERS" ] && echo 1 || echo 0
}

###
# Backup volume
#
# Writes a tar file to the instances backup directory
#
# $1: docker-compose prefix (aka INSTANCE_ID)
# $2: volume name
# [$3]: backup filename (defaults to timestamp)
#
backup_volume () {

    [ -z "${1}" ] && {
        echo "Missing 1: ID for instance."
        exit 1
    }
    [ -z "${2}" ] && {
        echo "Missing 2: VOLUME NAME for instance."
        exit 1
    }

    INSTANCE_ID=$1
    VOLUME_NAME=$2
    VOLUME_IDENTIFIER="${INSTANCE_ID}_${VOLUME_NAME}"
    BACKUP_FILENAME="${3:-slugify_timestamp}.tar"

    echo "‚úçÔ∏è Backing up volume ${VOLUME_IDENTIFIER} üëâ ${BACKUP_FILENAME}"

    docker run --rm \
        --volume "${VOLUME_IDENTIFIER}:/backup" \
        --volume "${HERE}/instances/${INSTANCE_ID}/backups/:/backup" \
        ubuntu \
        tar cvf "/backup/${BACKUP_FILENAME}" /backup

    echo "üéâ Volume backup of ${VOLUME_IDENTIFIER} done"
}

###
# Restore volume
#
restore_volume () {

    [ -z "${1}" ] && {
        echo "Missing 1: ID for instance."
        exit 1
    }
    [ -z "${2}" ] && {
        echo "Missing 2: VOLUME NAME for instance."
        exit 1
    }
    [ -z "${3}" ] && {
        echo "Missing 3: BACKUP_FILENAME for instance."
        exit 1
    }

    INSTANCE_ID=$1
    VOLUME_NAME=$2
    VOLUME_IDENTIFIER="${INSTANCE_ID}_${VOLUME_NAME}"
    BACKUP_FILENAME="${3}.tar"

    echo "‚úçÔ∏è Restoring volume backup ${BACKUP_FILENAME} üëâ ${VOLUME_IDENTIFIER}"

    docker run --rm \
        --volume "${INSTANCE_ID}_${VOLUME_NAME}]:/backup" \
        --volume "${HERE}/instances/${INSTANCE_ID}/backups/:/backup" \
        ubuntu \
        tar xvf "/backup/${BACKUP_FILENAME}" -C /backup --strip 1

    echo "üéâ Volume restore of ${VOLUME_IDENTIFIER} done"
}


###
# Create a slugerized timestamp
#
slugify_timestamp(){
    date "+%Y.%m.%d-%H.%M.%S"
}


op_ () ( echo "No arguments provided." )
op_call_ () ( echo "Invalid call '$@'" )

op_option_v () ( op_option_version )
op_option_version () ( op_command_version )
op_command_version () ( echo "Version: 0.0" )

op_option_h () ( op_command_help "$@" )
op_option_help () ( op_command_help "$@" )
op_command_help () (

    case $1 in
        "new")
            dedent """
                Creates a new instance

                ‚å®Ô∏è  Usage

                ./op new <ID>
            """
            exit 0

        ;;

        "run")
            dedent """
                Run an instance


                ‚å®Ô∏è  Usage

                ./op run <ID>
            """
            exit 0
        ;;

        "backup")
            dedent """
                Backup an instance


                ‚å®Ô∏è  Usage

                ./op run <ID>
            """
            exit 0
        ;;

        "restore")
            dedent """
                Restore an instance


                ‚å®Ô∏è  Usage

                ./op run <ID>
            """
            exit 0
        ;;

        *)
            dedent """

                ‚å®Ô∏è  Usage

                $ ./op [command]

                ‚ùì Commands

                new     ID           - Creates a new instance <ID>
                run     ID           - Run an instance <ID>
                backup  ID [NAME]    - Backup an existing instance <ID> with [NAME] defaults to a timestamp
                restore ID NAME      - Restore backups <NAME> for an instance <ID>

            """
            exit 0
        ;;
    esac

 )



#
# clone the templates directory and find/replace all  with $1
op_command_new () {

    [ -z "${1}" ] && {
        echo "üõë Missing ID for new instance."
        op_option_help new
        exit 1
    }
    TARGET="${HERE}/instances/${1}";

    [ -d "${TARGET}" ] && {
        echo "üõë Directory ${TARGET} exists."
        exit 1
    }

    cp -R ./core/template "./instances/${1}";
    grep -rl '' $TARGET | xargs --no-run-if-empty sed -i "s//$1/g"
}

op_command_run () {
    [ -z "${1}" ] && {
        echo "üõë Missing ID for instance."
        op_option_help
        exit 1
    }

    TARGET="${HERE}/instances/${1}";
    COMPOSE="${TARGET}/docker-compose.yml"

    [ ! -d "${TARGET}" ] && {
        echo "üõë Directory ${TARGET} does not exist."
        exit 1
    }

    docker-compose -f ${COMPOSE} up
}

op_command_restore () {
    [ -z "${1}" ] && {
        echo "üõë Missing ID for instance."
        op_option_help restore
        exit 1
    }

    [ -z "${2}" ] && {
        echo "üõë Missing restore name for instance $1."
        op_option_help restore
        exit 1
    }

    TARGET="${HERE}/instances/${1}";
    COMPOSE="${TARGET}/docker-compose.yml";
    RESTORE_SOURCE="${HERE}/instances/backups/${2}";

    [ ! -d "${TARGET}" ] && {
        echo "üõë Directory ${TARGET} does not exist."
        exit 1
    }

    [ ! -d "${RESTORE_SOURCE}" ] && {
        echo "üõë Restore source ${RESTORE_SOURCE} does not exist."
        exit 1
    }

    # check if the instance is running
    [ $(is_compose_stack_running "${COMPOSE}") -eq 0 ] && {
        docker-compose -d up
    }

    # backup instance locally tagged as "date-pre-restore"
    docker-compose -f "${COMPOSE}" exec \
        backup \
        /backup.sh \
        "/backup/${slugify_timestamp}-${2}-pre_restore"

    # run restore
    docker-compose -f "${COMPOSE}" exec \
        backup \
        /restore.sh \
        "/backup/${2}"
}

op_command_backup () {
    [ -z "${1}" ] && {
        echo "üõë Missing ID for instance."
        op_option_help backup
        exit 1
    }

    [ -z "${2}" ] && {
        BACKUP_NAME="${2:-slugify_timestamp}"
        echo "‚ÑπÔ∏è Using backup name "$BACKUP_NAME" for instance $1."
    }

    TARGET="${HERE}/instances/${1}";
    COMPOSE="${TARGET}/docker-compose.yml";
    BACKUP_TARGET="${HERE}/instances/backups/$BACKUP_NAME";

    [ ! -d "${TARGET}" ] && {
        echo "üõë Directory ${TARGET} does not exist."
        exit 1
    }

    # check if the instance is running
    [ $(is_compose_stack_running "${COMPOSE}") -eq 0 ] && {
        docker-compose -d up
    }

    # backup instance locally tagged as "date-pre-restore"
    docker-compose -f "${COMPOSE}" exec \
        backup \
        /backup.sh \
        "/backup/${BACKUP_NAME}"
}

op_command_rm () { op_command_remove "$@"; }
op_command_remove () {
    [ -z "${1}" ] && {
        echo "üõë Missing ID for instance."
        op_option_help remove
        exit 1
    }

    TARGET="${HERE}/instances/${1}";
    COMPOSE="${TARGET}/docker-compose.yml";

    [ ! -d "${TARGET}" ] && {
        echo "üõë Directory ${TARGET} does not exist."
        exit 1
    }

    # check if the instance is running

    [ $(is_compose_stack_running "${COMPOSE}") -eq 1 ] && {
        echo "Stopping ${TARGET}"
        docker-compose -d stop
    }

    # backup instance locally tagged as "date-pre-restore"
    docker-compose -f "${COMPOSE}" rm -f
}

# Dispatch the arguments
dispatch op "$@"
